/**
 * 红黑树
 * 红黑树就是为了解决在多次插入的情况下二叉查找树变成线性查找的问题，比如
 *
 *               8
 *              / \
 *             7  10
 *
 * 如果插入 6 5 4.. 则节点都会在左边分布下去（变成一个线性）
 * 如果插入 11 12 ... 则节点都会在右边分布下去，变成线性。
 *
 * 普通的二叉查找树在极端情况下可退化成链表，此时的增删查效率都会比较低下。
 * 红黑树是自平衡的二叉查找树，这些自平衡的查找树通过定义一些性质，将任意节点的左右子树高度差控制在规定范围内，以达到平衡状态。
 *
 * 1.节点是红色或黑色。
 * 2.根节点是黑色。
 * 3.每个叶子节点都是黑色的空节点（NIL节点）。
 * 4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)
 * 5.从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。
 *
 * 性质4和性质5用途凸显，有了这两个性质作为约束，即可保证任意节点到其每个叶子节点路径最长不会超过最短路径的2倍。
 * 原因如下：当某条路径最短时，这条路径必然都是由黑色节点构成。当某条路径长度最长时，
 * 这条路径必然是由红色和黑色节点相间构成（性质4限定了不能出现两个连续的红色节点）。
 * 而性质5又限定了从任一节点到其每个叶子节点的所有路径必须包含相同数量的黑色节点。
 * 此时，在路径最长的情况下，路径上红色节点数量 = 黑色节点数量。该路径长度为两倍黑色节点数量，也就是最短路径长度的2倍。
 *
 *
 */
package cn.bj.brook.algorithm.tree.redblack;