/**
 * 树的算法包
 * 前序遍历：先根，然后左子树，最后右子树
 * 中序遍历：先左子树，然后根，最后右子树
 * 后序遍历：先左子树，然后右子树，最后根
 *
 * 二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树：
 * 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；
 * 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。
 *
 * 二叉搜索树的遍历逻辑重点在于左侧的节点一定小于父节点，及更上层父节点一直回溯到根节点，所以
 *
 *        3
 *      /  \
 *     2   4
 *    /     \
 *   5      1
 *   这种结构是无论如何都不会出现的，5肯定不会出现在3的左边，1也不会出现在3的右边
 *
 * 满二叉树：高度为h，由2^h-1个节点构成的二叉树称为满二叉树。
 * 完全二叉树：完全二叉树是由满二叉树而引出来的，若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数(即1~h-1层为一个满二叉树)，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。
 * 堆一般都是用完全二叉树来实现的。
 */
package cn.bj.brook.algorithm.tree;

